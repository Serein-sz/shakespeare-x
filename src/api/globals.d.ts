/* tslint:disable */
 
/**
 * FastAPI - version 0.1.0
 *
 *
 *
 * OpenAPI version: 3.1.0
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type {Alova, AlovaGenerics, AlovaMethodCreateConfig, Method} from 'alova';
import type {$$userConfigMap, alovaInstance} from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export type Token = {
  /**
   * Access Token
   * ---
   * [required]
   */
  access_token: string;
  /**
   * Token Type
   * ---
   * [required]
   */
  token_type: string;
};
export type ApiResponse_Token_ = {
  /**
   * Code
   * ---
   * [required]
   */
  code: number;
  /**
   * Message
   * ---
   * [required]
   */
  message: string;
  data?: Token | null;
  /**
   * Errors
   * ---
   */
  errors?: string[] | null;
};
export type Body_token_auth_token_post = {
  /**
   * Grant Type
   * ---
   */
  grant_type?: string | null;
  /**
   * Username
   * ---
   * [required]
   */
  username: string;
  /**
   * Password
   * ---
   * [required]
   */
  password: string;
  /**
   * Scope
   * ---
   */
  scope?: string;
  /**
   * Client Id
   * ---
   */
  client_id?: string | null;
  /**
   * Client Secret
   * ---
   */
  client_secret?: string | null;
};
export type ApiResponse = {
  /**
   * Code
   * ---
   * [required]
   */
  code: number;
  /**
   * Message
   * ---
   * [required]
   */
  message: string;
  /**
   * Data
   * ---
   */
  data?: unknown | null;
  /**
   * Errors
   * ---
   */
  errors?: string[] | null;
};
export type UserCreate = {
  /**
   * Id
   * ---
   */
  id?: string | null;
  /**
   * Name
   * ---
   */
  name?: string | null;
  /**
   * Avatar
   * ---
   */
  avatar?: string | null;
  /**
   * Email
   * ---
   * [required]
   */
  email: string;
  /**
   * Password
   * ---
   * [required]
   */
  password: string;
};
export type UserVo = {
  /**
   * Id
   * ---
   */
  id?: string | null;
  /**
   * Name
   * ---
   */
  name?: string | null;
  /**
   * Avatar
   * ---
   */
  avatar?: string | null;
  /**
   * Email
   * ---
   * [required]
   */
  email: string;
};
export type ApiResponse_UserVo_ = {
  /**
   * Code
   * ---
   * [required]
   */
  code: number;
  /**
   * Message
   * ---
   * [required]
   */
  message: string;
  data?: UserVo | null;
  /**
   * Errors
   * ---
   */
  errors?: string[] | null;
};
export type UserUpdate = {
  /**
   * Id
   * ---
   * [required]
   */
  id: string;
  /**
   * Name
   * ---
   */
  name?: string | null;
  /**
   * Avatar
   * ---
   */
  avatar?: string | null;
  /**
   * Email
   * ---
   * [required]
   */
  email: string;
  /**
   * Password
   * ---
   */
  password?: string | null;
};
export type FileTreeVo = {
  /**
   * Id
   * ---
   */
  id?: string | null;
  /**
   * Name
   * ---
   * [required]
   */
  name: string;
  /**
   * Parent Id
   * ---
   */
  parent_id?: string | null;
  /**
   * Type
   * ---
   * [required]
   */
  type: 'folder' | 'file';
  /**
   * Content
   * ---
   */
  content?: string | null;
  /**
   * User Id
   * ---
   * [required]
   */
  user_id: string;
  /**
   * Children
   * ---
   */
  children?: FileTreeVo[] | null;
};
export type ApiResponse_list_FileTreeVo__ = {
  /**
   * Code
   * ---
   * [required]
   */
  code: number;
  /**
   * Message
   * ---
   * [required]
   */
  message: string;
  /**
   * Data
   * ---
   */
  data?: FileTreeVo[] | null;
  /**
   * Errors
   * ---
   */
  errors?: string[] | null;
};
export type FileTreeCreate = {
  /**
   * Id
   * ---
   */
  id?: string | null;
  /**
   * Name
   * ---
   * [required]
   */
  name: string;
  /**
   * Parent Id
   * ---
   */
  parent_id?: string | null;
  /**
   * Type
   * ---
   * [required]
   */
  type: 'folder' | 'file';
  /**
   * Content
   * ---
   */
  content?: string | null;
  /**
   * User Id
   * ---
   */
  user_id?: string | null;
};
export type ApiResponse_str_ = {
  /**
   * Code
   * ---
   * [required]
   */
  code: number;
  /**
   * Message
   * ---
   * [required]
   */
  message: string;
  /**
   * Data
   * ---
   */
  data?: string | null;
  /**
   * Errors
   * ---
   */
  errors?: string[] | null;
};
export type FileTreeUpdateContent = {
  /**
   * Id
   * ---
   * [required]
   */
  id: string;
  /**
   * Content
   * ---
   * [required]
   */
  content: string;
};
export type ApiResponse_bool_ = {
  /**
   * Code
   * ---
   * [required]
   */
  code: number;
  /**
   * Message
   * ---
   * [required]
   */
  message: string;
  /**
   * Data
   * ---
   */
  data?: boolean | null;
  /**
   * Errors
   * ---
   */
  errors?: string[] | null;
};
declare global {
  interface Apis {
    auth: {
      /**
       * ---
       *
       * [POST] Token
       *
       * **path:** /auth/token
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] Grant Type
       *   grant_type?: string | null
       *   // [title] Username
       *   // [required]
       *   username: string
       *   // [title] Password
       *   // [required]
       *   password: string
       *   // [title] Scope
       *   scope?: string
       *   // [title] Client Id
       *   client_id?: string | null
       *   // [title] Client Secret
       *   client_secret?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   data?: {
       *     // [title] Access Token
       *     // [required]
       *     access_token: string
       *     // [title] Token Type
       *     // [required]
       *     token_type: string
       *   } | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      token_auth_token_post<
        Config extends Alova2MethodConfig<ApiResponse_Token_> & {
          data: Body_token_auth_token_post;
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse_Token_, 'auth.token_auth_token_post', Config>;
      /**
       * ---
       *
       * [POST] Register
       *
       * **path:** /auth/register
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] Id
       *   id?: string | null
       *   // [title] Name
       *   name?: string | null
       *   // [title] Avatar
       *   avatar?: string | null
       *   // [title] Email
       *   // [required]
       *   email: string
       *   // [title] Password
       *   // [required]
       *   password: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: unknown | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      register_auth_register_post<
        Config extends Alova2MethodConfig<ApiResponse> & {
          data: UserCreate;
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'auth.register_auth_register_post', Config>;
    };
    user: {
      /**
       * ---
       *
       * [GET] Get User
       *
       * **path:** /user/
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   data?: {
       *     // [title] Id
       *     id?: string | null
       *     // [title] Name
       *     name?: string | null
       *     // [title] Avatar
       *     avatar?: string | null
       *     // [title] Email
       *     // [required]
       *     email: string
       *   } | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      get_user_user__get<Config extends Alova2MethodConfig<ApiResponse_UserVo_>>(
        config?: Config
      ): Alova2Method<ApiResponse_UserVo_, 'user.get_user_user__get', Config>;
      /**
       * ---
       *
       * [PUT] Update User
       *
       * **path:** /user/
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] Id
       *   // [required]
       *   id: string
       *   // [title] Name
       *   name?: string | null
       *   // [title] Avatar
       *   avatar?: string | null
       *   // [title] Email
       *   // [required]
       *   email: string
       *   // [title] Password
       *   password?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: unknown | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      update_user_user__put<
        Config extends Alova2MethodConfig<ApiResponse> & {
          data: UserUpdate;
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'user.update_user_user__put', Config>;
      /**
       * ---
       *
       * [DELETE] Delete User
       *
       * **path:** /user/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [title] Id
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: unknown | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      delete_user_user__id__delete<
        Config extends Alova2MethodConfig<ApiResponse> & {
          pathParams: {
            /**
             * Id
             * ---
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'user.delete_user_user__id__delete', Config>;
    };
    file: {
      /**
       * ---
       *
       * [GET] Get File
       *
       * **path:** /file/
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: Array<{
       *     // [title] Id
       *     id?: string | null
       *     // [title] Name
       *     // [required]
       *     name: string
       *     // [title] Parent Id
       *     parent_id?: string | null
       *     // [title] Type
       *     // [required]
       *     type: 'folder' | 'file'
       *     // [title] Content
       *     content?: string | null
       *     // [title] User Id
       *     // [required]
       *     user_id: string
       *     // [title] Children
       *     children?: Array<FileTreeVo> | null
       *   }> | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      get_file_file__get<Config extends Alova2MethodConfig<ApiResponse_list_FileTreeVo__>>(
        config?: Config
      ): Alova2Method<ApiResponse_list_FileTreeVo__, 'file.get_file_file__get', Config>;
      /**
       * ---
       *
       * [POST] Create File
       *
       * **path:** /file/
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] Id
       *   id?: string | null
       *   // [title] Name
       *   // [required]
       *   name: string
       *   // [title] Parent Id
       *   parent_id?: string | null
       *   // [title] Type
       *   // [required]
       *   type: 'folder' | 'file'
       *   // [title] Content
       *   content?: string | null
       *   // [title] User Id
       *   user_id?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: unknown | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      create_file_file__post<
        Config extends Alova2MethodConfig<ApiResponse> & {
          data: FileTreeCreate;
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'file.create_file_file__post', Config>;
      /**
       * ---
       *
       * [DELETE] Delete File
       *
       * **path:** /file/
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [title] Id
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: unknown | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      delete_file_file__delete<
        Config extends Alova2MethodConfig<ApiResponse> & {
          params: {
            /**
             * Id
             * ---
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'file.delete_file_file__delete', Config>;
      /**
       * ---
       *
       * [GET] Get File Content By Id
       *
       * **path:** /file/{id}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // [title] Id
       *   // [required]
       *   id: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: string | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      get_file_content_by_id_file__id__get<
        Config extends Alova2MethodConfig<ApiResponse_str_> & {
          pathParams: {
            /**
             * Id
             * ---
             * [required]
             */
            id: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse_str_, 'file.get_file_content_by_id_file__id__get', Config>;
      /**
       * ---
       *
       * [PUT] Update File
       *
       * **path:** /file/update-content
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] Id
       *   // [required]
       *   id: string
       *   // [title] Content
       *   // [required]
       *   content: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: unknown | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      update_file_file_update_content_put<
        Config extends Alova2MethodConfig<ApiResponse> & {
          data: FileTreeUpdateContent;
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'file.update_file_file_update_content_put', Config>;
      /**
       * ---
       *
       * [PUT] Move File
       *
       * **path:** /file/move-to
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [title] Id
       *   // [required]
       *   id: string
       *   // [title] Target Id
       *   target_id?: string | null
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] Code
       *   // [required]
       *   code: number
       *   // [title] Message
       *   // [required]
       *   message: string
       *   // [title] Data
       *   data?: boolean | null
       *   // [title] Errors
       *   errors?: string[] | null
       * }
       * ```
       */
      move_file_file_move_to_put<
        Config extends Alova2MethodConfig<ApiResponse_bool_> & {
          params: {
            /**
             * Id
             * ---
             * [required]
             */
            id: string;
            /**
             * Target Id
             * ---
             */
            target_id?: string | null;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse_bool_, 'file.move_file_file_move_to_put', Config>;
    };
  }

  var Apis: Apis;
}
